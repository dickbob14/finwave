"""
Models for scheduler and alert system
"""

from datetime import datetime
from enum import Enum
from typing import Optional

from sqlalchemy import Column, String, Float, DateTime, ForeignKey, Text, Index
from sqlalchemy.orm import relationship

from core.database import Base


class AlertSeverity(Enum):
    """Alert severity levels"""
    INFO = "info"
    WARNING = "warning"
    CRITICAL = "critical"


class AlertStatus(Enum):
    """Alert status"""
    ACTIVE = "active"
    ACKNOWLEDGED = "acknowledged"
    RESOLVED = "resolved"


class Alert(Base):
    """Alert generated by variance rules"""
    __tablename__ = "alerts"
    
    # Primary key
    id = Column(String, primary_key=True, default=lambda: f"alert_{datetime.utcnow().timestamp()}")
    
    # Alert details
    workspace_id = Column(String, ForeignKey("workspaces.id"), nullable=False)
    metric_id = Column(String, nullable=False)
    rule_name = Column(String, nullable=False)
    severity = Column(String, nullable=False, default=AlertSeverity.WARNING.value)
    status = Column(String, nullable=False, default=AlertStatus.ACTIVE.value)
    
    # Alert content
    message = Column(Text, nullable=False)
    current_value = Column(Float, nullable=True)
    threshold_value = Column(Float, nullable=True)
    comparison_value = Column(Float, nullable=True)
    
    # Timestamps
    triggered_at = Column(DateTime, nullable=False, default=datetime.utcnow)
    acknowledged_at = Column(DateTime, nullable=True)
    resolved_at = Column(DateTime, nullable=True)
    
    # User tracking
    acknowledged_by = Column(String, nullable=True)
    resolved_by = Column(String, nullable=True)
    
    # Notes
    notes = Column(Text, nullable=True)
    
    # Indexes for performance
    __table_args__ = (
        Index('ix_alerts_workspace_triggered', 'workspace_id', 'triggered_at'),
        Index('ix_alerts_workspace_status', 'workspace_id', 'status'),
        Index('ix_alerts_metric', 'workspace_id', 'metric_id'),
        Index('ix_alerts_rule', 'workspace_id', 'rule_name'),
    )


class ScheduledJob(Base):
    """Track scheduled job execution"""
    __tablename__ = "scheduled_jobs"
    
    id = Column(String, primary_key=True, default=lambda: f"job_{datetime.utcnow().timestamp()}")
    
    # Job details
    job_name = Column(String, nullable=False)
    workspace_id = Column(String, nullable=True)  # Optional, some jobs are global
    
    # Execution tracking
    started_at = Column(DateTime, nullable=False, default=datetime.utcnow)
    completed_at = Column(DateTime, nullable=True)
    status = Column(String, nullable=False, default="running")
    
    # Results
    records_processed = Column(Float, nullable=True)
    error_message = Column(Text, nullable=True)
    result_json = Column(Text, nullable=True)
    
    # Indexes
    __table_args__ = (
        Index('ix_scheduled_jobs_name_started', 'job_name', 'started_at'),
        Index('ix_scheduled_jobs_workspace', 'workspace_id', 'started_at'),
    )